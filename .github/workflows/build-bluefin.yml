---
name: Build Bluefin container image
on:
  pull_request:
    branches:
      - main
    paths-ignore:
      - "**/README.md"
      - "build-bazzite.yml"
      - "bazzite.go"
      - "build-cayo.yml"
      - "cayo.go"
      - "build-fedora.yml"
      - "fedora.go"
  schedule:
    - cron: "05 10 * * *" # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - "**/README.md"
      - "build-bazzite.yml"
      - "bazzite.go"
      - "build-cayo.yml"
      - "cayo.go"
      - "build-fedora.yml"
      - "fedora.go"
  workflow_dispatch:

env:
  IMAGE_DESC: "Bluefin (Starlit Edition)"
  IMAGE_KEYWORDS: "bootc,ublue,universal-blue,bluefin"
  IMAGE_LOGO_URL: "https://avatars.githubusercontent.com/u/120078124?s=200&v=4" # Put your own image here for a fancy profile on https://artifacthub.io/!
  IMAGE_NAME: "bluefin"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}"
  DEFAULT_TAG: "latest"
  SOURCE_IMAGE: "ghcr.io/ublue-os/bluefin-dx:stable-daily"
  SOURCE_IMAGE_KEY: "https://raw.githubusercontent.com/ublue-os/bluefin/refs/heads/main/cosign.pub"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}-${{ inputs.brand_name}}-${{ inputs.stream_name }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: blacksmith-4vcpu-ubuntu-2404

    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Prepare environment
        run: |
          # Lowercase the image uri
          echo "IMAGE_REGISTRY=${IMAGE_REGISTRY,,}" >> ${GITHUB_ENV}
          echo "IMAGE_NAME=${IMAGE_NAME,,}" >> ${GITHUB_ENV}

      # These stage versions are pinned by https://github.com/renovatebot/renovate
      - name: Checkout
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5

      - name: Install Cosign
        uses: sigstore/cosign-installer@d7543c93d881b35a8faa02e8e3605f69b7a1ce62 # v3.10.0

      - name: Verify source image signature
        run: |
          cosign verify --key ${SOURCE_IMAGE_KEY} ${SOURCE_IMAGE}

      # This is optional, but if you see that your builds are way too big for the runners, you can enable this by uncommenting the following lines:
      # - name: Maximize build space
      #   uses: ublue-os/remove-unwanted-software@517622d6452028f266b7ba4cc9a123b5f58a6b53 # v7
      #   with:
      #     remove-codeql: true

      # - name: Mount BTRFS for podman storage
      #   uses: ublue-os/container-storage-action@main

      - name: Get current date
        id: date
        run: |
          # This generates a timestamp like what is defined on the ArtifactHub documentation
          # E.G: 2022-02-08T15:38:15Z'
          # https://artifacthub.io/docs/topics/repositories/container-images/
          # https://linux.die.net/man/1/date
          echo "date=$(date -u +%Y\-%m\-%d\T%H\:%M\:%S\Z)" >> $GITHUB_OUTPUT

      # Image metadata for https://artifacthub.io/ - This is optional but is highly recommended so we all can get a index of all the custom images
      # The metadata by itself is not going to do anything, you choose if you want your image to be on ArtifactHub or not.
      - name: Image Metadata
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5
        id: metadata
        with:
          # This generates all the tags for your image, you can add custom tags here too!
          # Default tags are "$DEFAULT_TAG" and "$DEFAULT_TAG.$date".
          tags: |
            type=raw,value=${{ env.DEFAULT_TAG }}
            type=raw,value=${{ env.DEFAULT_TAG }}.{{date 'YYYYMMDD'}}
            type=raw,value={{date 'YYYYMMDD'}}
            type=sha,enable=${{ github.event_name == 'pull_request' }}
            type=ref,event=pr
          sep-tags: ","
          sep-annotations: " "

      - name: Setup Docker Cache
        id: docker_cache
        uses: useblacksmith/setup-docker-builder@667901886a7d8820ef0c8928d3a0a828e3c59e7c # v1

      - name: Setup Dagger
        id: setup_dagger
        uses: dagger/dagger-for-github@d913e70051faf3b907d4dd96ef1161083c88c644 # v8.2.0
        with:
          version: "latest"
          cloud-token: ${{ secrets.DAGGER_CLOUD_TOKEN }}

      - name: Build Image
        run: |
          ${{ env.IMAGE_NAME }}-container ${{ env.SOURCE_IMAGE }} |
          build
        shell: dagger {0}
        env:
          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@5e57cd118135c172c3672efd75eb46360885c0ef # v3
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          ${{ env.IMAGE_NAME }}-container ${{ env.SOURCE_IMAGE }} |
          with-label io.artifacthub.package.readme-url https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/refs/heads/main/README.md |
          with-label io.artifacthub.package.homepage-url https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} |
          with-label io.artifacthub.package.documentation-url https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}/blob/main/README.md |
          with-label io.artifacthub.package.source-url https://github.com/${{ github.repository_owner }}/${{ env.IMAGE_NAME }} |
          with-label io.artifacthub.package.license Apache-2.0 |
          with-label io.artifacthub.package.logo-url "${{ env.IMAGE_LOGO_URL }}" |
          with-label io.artifacthub.package.prerelease false |
          with-label containers.bootc "1" |
          with-registry-auth ${{ env.IMAGE_REGISTRY }} ${{ github.repository_owner }} REGISTRY_PASSWORD |
          with-tags ${{ steps.metadata.outputs.tags }} |
          publish ${{ env.IMAGE_REGISTRY }} ${{ env.IMAGE_NAME }}
        shell: dagger {0}
        env:
          DAGGER_CLOUD_TOKEN: ${{ secrets.DAGGER_CLOUD_TOKEN }}
          REGISTRY_PASSWORD: ${{ github.token }}

      - name: Sign container image
        if: github.event_name != 'pull_request' && github.ref == format('refs/heads/{0}', github.event.repository.default_branch)
        run: |
          IMAGE_FULL="${{ env.IMAGE_REGISTRY }}/${{ env.IMAGE_NAME }}"
          TAGS="${{ steps.metadata.outputs.tags }}"
          for tag in ${TAGS//,/ }; do
            cosign sign -y $IMAGE_FULL:$tag
          done
        env:
          COSIGN_EXPERIMENTAL: false
